{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Setu UPI DeepLinks: Python SDK \u00b6 setu is a Python SDK for accessing Setu\u2019s UPI Deeplinks APIs. The SDK is designed with ease of access in mind, with native Python class objects for inputs & ouputs and custom exceptions. Python package to connect to Setu's UPI Deep Link APIs Getting started \u00b6 SDK documentation \u2192 . Full documentation \u2192 . Product overview \u2192 Installation \u00b6 pip install setu Features \u00b6 Full support for latest UPI Deeplinks APIs Native Python class objects for all inputs & responses Allows both JWT & OAuth authentication mechanisms SANDBOX mode to test integration & PRODUCTION for live data Internal mechanism for OAuth authentication to automatically re-fetch token when current one expires, and retry all failed requests. Examples \u00b6 Setup \u00b6 from setu import Deeplink from setu.contract import RefundRequestItem , SetuAPIException dl = Deeplink ( scheme_id = \"c4f57443-dc1e-428f-8c4e-e5fd531057d2\" , secret = \"5b288618-473f-4193-ae1b-8c42f223798e\" , product_instance_id = \"861023031961584801\" , auth_type = \"OAUTH\" , mode = \"SANDBOX\" , ) Generate UPI payment link \u00b6 bill_amount = 100 try : link = dl . create_payment_link ( amount_value = bill_amount , biller_bill_id = \"test_transaction_1234\" , amount_exactness = \"EXACT\" , payee_name = \"Python SDK unittest\" , transaction_note = \"unittest transaction\" , ) assert link . payment_link . upi_id == \"refundtest@kaypay\" except SetuException as e : assert False Get Payment Link Status \u00b6 try : link_status = dl . check_payment_status ( link . platform_bill_id ) assert link_status . status == \"BILL_CREATED\" except SetuAPIException as e : assert False Trigger mock payment for UPI payment link (Sandbox only) \u00b6 try : credit_response = dl . trigger_mock_payment ( float ( bill_amount ) / 100 , link . payment_link . upi_id , link . platform_bill_id ) except SetuAPIException as e : assert False Mock Settlement \u00b6 try : dl . trigger_mock_settlement ([ credit_response . utr ]) except SetuAPIException as e : assert False Initiate Refund \u00b6 try : batch_initiate_refund_response = dl . initiate_batch_refund ( refunds = [ RefundRequestItem ( identifier = link . platform_bill_id , identifierType = \"BILL_ID\" , refundType = \"FULL\" , ), ], ) assert batch_initiate_refund_response . refunds [ 0 ] . status == \"MarkedForRefund\" except SetuAPIException as e : assert False Get refund batch status \u00b6 try : refund_batch_status_response = dl . get_batch_refund_status ( batch_initiate_refund_response . batch_id ) assert refund_batch_status_response . refunds [ 0 ] . bill_id == link . platform_bill_id except SetuAPIException as e : assert False Get individual refund status \u00b6 try : refund_status_response = dl . get_refund_status ( batch_initiate_refund_response . refunds [ 0 ] . id ) assert refund_status_response . bill_id == link . platform_bill_id except SetuAPIException as e : assert False Contributing \u00b6 Have a look through existing Issues and Pull Requests that you could help with. If you'd like to request a feature or report a bug, please create a GitHub Issue using the template provided. See contribution guide \u2192 Credits \u00b6 This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template. License \u00b6 MIT. Have at it.","title":"Home"},{"location":"#setu-upi-deeplinks-python-sdk","text":"setu is a Python SDK for accessing Setu\u2019s UPI Deeplinks APIs. The SDK is designed with ease of access in mind, with native Python class objects for inputs & ouputs and custom exceptions. Python package to connect to Setu's UPI Deep Link APIs","title":"Setu UPI DeepLinks: Python SDK"},{"location":"#getting-started","text":"SDK documentation \u2192 . Full documentation \u2192 . Product overview \u2192","title":"Getting started"},{"location":"#installation","text":"pip install setu","title":"Installation"},{"location":"#features","text":"Full support for latest UPI Deeplinks APIs Native Python class objects for all inputs & responses Allows both JWT & OAuth authentication mechanisms SANDBOX mode to test integration & PRODUCTION for live data Internal mechanism for OAuth authentication to automatically re-fetch token when current one expires, and retry all failed requests.","title":"Features"},{"location":"#examples","text":"","title":"Examples"},{"location":"#setup","text":"from setu import Deeplink from setu.contract import RefundRequestItem , SetuAPIException dl = Deeplink ( scheme_id = \"c4f57443-dc1e-428f-8c4e-e5fd531057d2\" , secret = \"5b288618-473f-4193-ae1b-8c42f223798e\" , product_instance_id = \"861023031961584801\" , auth_type = \"OAUTH\" , mode = \"SANDBOX\" , )","title":"Setup"},{"location":"#generate-upi-payment-link","text":"bill_amount = 100 try : link = dl . create_payment_link ( amount_value = bill_amount , biller_bill_id = \"test_transaction_1234\" , amount_exactness = \"EXACT\" , payee_name = \"Python SDK unittest\" , transaction_note = \"unittest transaction\" , ) assert link . payment_link . upi_id == \"refundtest@kaypay\" except SetuException as e : assert False","title":"Generate UPI payment link"},{"location":"#get-payment-link-status","text":"try : link_status = dl . check_payment_status ( link . platform_bill_id ) assert link_status . status == \"BILL_CREATED\" except SetuAPIException as e : assert False","title":"Get Payment Link Status"},{"location":"#trigger-mock-payment-for-upi-payment-link-sandbox-only","text":"try : credit_response = dl . trigger_mock_payment ( float ( bill_amount ) / 100 , link . payment_link . upi_id , link . platform_bill_id ) except SetuAPIException as e : assert False","title":"Trigger mock payment for UPI payment link (Sandbox only)"},{"location":"#mock-settlement","text":"try : dl . trigger_mock_settlement ([ credit_response . utr ]) except SetuAPIException as e : assert False","title":"Mock Settlement"},{"location":"#initiate-refund","text":"try : batch_initiate_refund_response = dl . initiate_batch_refund ( refunds = [ RefundRequestItem ( identifier = link . platform_bill_id , identifierType = \"BILL_ID\" , refundType = \"FULL\" , ), ], ) assert batch_initiate_refund_response . refunds [ 0 ] . status == \"MarkedForRefund\" except SetuAPIException as e : assert False","title":"Initiate Refund"},{"location":"#get-refund-batch-status","text":"try : refund_batch_status_response = dl . get_batch_refund_status ( batch_initiate_refund_response . batch_id ) assert refund_batch_status_response . refunds [ 0 ] . bill_id == link . platform_bill_id except SetuAPIException as e : assert False","title":"Get refund batch status"},{"location":"#get-individual-refund-status","text":"try : refund_status_response = dl . get_refund_status ( batch_initiate_refund_response . refunds [ 0 ] . id ) assert refund_status_response . bill_id == link . platform_bill_id except SetuAPIException as e : assert False","title":"Get individual refund status"},{"location":"#contributing","text":"Have a look through existing Issues and Pull Requests that you could help with. If you'd like to request a feature or report a bug, please create a GitHub Issue using the template provided. See contribution guide \u2192","title":"Contributing"},{"location":"#credits","text":"This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Credits"},{"location":"#license","text":"MIT. Have at it.","title":"License"},{"location":"api/","text":"Top-level package for Setu UPI DeepLinks SDK. auth \u00b6 Auth module. generate_jwt_token ( scheme_id , secret ) \u00b6 Generate a JWT token. Parameters: Name Type Description Default scheme_id str description required secret str description required Returns: Type Description str description Source code in setu/auth.py def generate_jwt_token ( scheme_id : str , secret : str ) -> str : \"\"\"Generate a JWT token. Args: scheme_id (str): _description_ secret (str): _description_ Returns: str: _description_ \"\"\" payload = { \"aud\" : scheme_id , \"iat\" : datetime . datetime . utcnow (), \"jti\" : str ( uuid . uuid1 ()), } return \"Bearer {} \" . format ( jwt . encode ( payload , secret , algorithm = \"HS256\" )) generate_oauth_token ( client_id , secret , mode = 'SANDBOX' ) \u00b6 Generate an OAuth token. Parameters: Name Type Description Default client_id str description required secret str description required mode Mode description . Defaults to \"SANDBOX\". 'SANDBOX' Returns: Type Description str description Source code in setu/auth.py def generate_oauth_token ( client_id : str , secret : str , mode : Mode = \"SANDBOX\" , ) -> str : \"\"\"Generate an OAuth token. Args: client_id (str): _description_ secret (str): _description_ mode (Mode, optional): _description_. Defaults to \"SANDBOX\". Returns: str: _description_ \"\"\" payload = { \"clientID\" : client_id , \"secret\" : secret , } headers = { \"Content-Type\" : \"application/json\" } response = requests . post ( get_url_path ( API . FETCH_TOKEN , AUTH_TYPE_OAUTH , mode ), json = payload , headers = headers , ) if response . status_code == 200 : data = response . json () return \"Bearer {} \" . format ( data [ \"data\" ][ \"token\" ]) raise body \u00b6 Body builder helper module. get_batch_refund_body ( ** kwargs ) \u00b6 Get the payload for Initiate Batch Refund API. Source code in setu/body.py def get_batch_refund_body ( ** kwargs ) -> Dict [ str , Any ]: \"\"\"Get the payload for Initiate Batch Refund API.\"\"\" payload = { \"refunds\" : [ { \"seqNo\" : i , \"identifier\" : refund . identifier , \"identifierType\" : refund . identifierType , \"refundType\" : refund . refundType , \"refundAmount\" : refund . refundAmount , \"deductions\" : [ { \"account\" : { \"id\" : deduction . account_number , \"ifsc\" : deduction . account_ifsc }, \"split\" : { \"value\" : deduction . amount_value , \"unit\" : \"INR\" }, } for deduction in ( refund . deductions if refund . deductions is not None else []) ], } for i , refund in enumerate ( cast ( List [ RefundRequestItem ], kwargs [ 'refunds' ])) ], } return payload get_create_payment_link_body ( ** kwargs ) \u00b6 Get the payload for Create Payment Link API. Source code in setu/body.py def get_create_payment_link_body ( ** kwargs ) -> Dict [ str , Any ]: \"\"\"Get the payload for Create Payment Link API.\"\"\" payload : Dict [ str , Any ] = { \"amount\" : { \"currencyCode\" : \"INR\" , \"value\" : kwargs [ 'amount_value' ]}, \"amountExactness\" : kwargs [ 'amount_exactness' ], \"billerBillID\" : kwargs [ 'biller_bill_id' ], } if kwargs [ 'payee_name' ] is not None : payload . update ({ \"name\" : kwargs [ 'payee_name' ]}) if kwargs [ 'transaction_note' ] is not None : payload . update ({ \"transactionNote\" : kwargs [ 'transaction_note' ]}) if kwargs [ 'expiry_date' ] is not None : expiry_date_str = kwargs [ 'expiry_date' ] . replace ( microsecond = 0 ) . isoformat () + \"Z\" payload . update ({ \"expiryDate\" : expiry_date_str }) if kwargs [ 'settlement' ] is not None : payload . update ( { \"settlement\" : { \"parts\" : [ { \"account\" : { \"id\" : part . account_number , \"ifsc\" : part . account_ifsc , }, \"split\" : { \"unit\" : \"INR\" , \"value\" : part . amount_value , }, } for part in kwargs [ 'settlement' ] . parts ], \"primaryAccount\" : { \"id\" : kwargs [ 'settlement' ] . primary_account . account_number , \"ifsc\" : kwargs [ 'settlement' ] . primary_account . account_ifsc , }, } } ) if kwargs [ 'validation_rules' ] is not None : vr : Dict [ str , Any ] = {} if kwargs [ 'validation_rules' ] . amount_validation is not None : vr . update ( { \"amount\" : { \"maximum\" : kwargs [ 'validation_rules' ] . amount_validation . maximum , \"minimum\" : kwargs [ 'validation_rules' ] . amount_validation . minimum , } } ) if kwargs [ 'validation_rules' ] . source_accounts is not None : vr . update ( { \"sourceAccounts\" : [ { \"number\" : source_account . account_number , \"ifsc\" : source_account . account_ifsc } for source_account in kwargs [ 'validation_rules' ] . source_accounts ] } ) payload . update ({ \"validationRules\" : vr }) if kwargs [ 'additional_info' ] is not None : payload . update ({ \"additionalInfo\" : kwargs [ 'additional_info' ]}) if kwargs [ 'campaign_id' ] is not None : payload . update ({ \"campaignID\" : kwargs [ 'campaign_id' ]}) return payload get_mock_credit_body ( ** kwargs ) \u00b6 Get the payload for Mock Credit API. Source code in setu/body.py def get_mock_credit_body ( ** kwargs ) -> Dict [ str , Any ]: \"\"\"Get the payload for Mock Credit API.\"\"\" payload = { \"amount\" : kwargs [ 'amount_value' ], \"type\" : \"UPI\" , \"sourceAccount\" : { \"accountID\" : \"customer@vpa\" }, \"destinationAccount\" : { \"accountID\" : kwargs [ 'upi_id' ]}, \"transactionReference\" : kwargs [ \"platform_bill_id\" ], } return payload get_mock_settlement_body ( ** kwargs ) \u00b6 Get the payload for Mock Settlement API. Source code in setu/body.py def get_mock_settlement_body ( ** kwargs ) -> Dict [ str , Any ]: \"\"\"Get the payload for Mock Settlement API.\"\"\" transactions = [{ \"utr\" : utr } for utr in kwargs [ 'utrs' ]] payload = { \"transactions\" : transactions } return payload contract \u00b6 Contract module. API ( Enum ) \u00b6 Enum containing all the API paths supported by SDK. Source code in setu/contract.py class API ( Enum ): \"\"\"Enum containing all the API paths supported by SDK.\"\"\" FETCH_TOKEN = \"/auth/token\" PAYMENT_LINK_BASE = \"/payment-links\" TRIGGER_MOCK_PAYMENT = \"/triggers/funds/addCredit\" TRIGGER_MOCK_SETTLEMENT = \"/triggers/funds/mockSettlement\" EXPIRE_BILL = \"/utilities/bills/ {} /expire\" REPORTS_BASE = \"/reports\" REFUNDS_BASE = \"/refund\" APICredentials ( tuple ) \u00b6 API Credential information. Source code in setu/contract.py class APICredentials ( NamedTuple ): \"\"\"API Credential information.\"\"\" scheme_id : str secret : str __getnewargs__ ( self ) special \u00b6 Return self as a plain tuple. Used by copy and pickle. Source code in setu/contract.py def __getnewargs__ ( self ): 'Return self as a plain tuple. Used by copy and pickle.' return _tuple ( self ) __new__ ( _cls , scheme_id , secret ) special staticmethod \u00b6 Create new instance of APICredentials(scheme_id, secret) __repr__ ( self ) special \u00b6 Return a nicely formatted representation string Source code in setu/contract.py def __repr__ ( self ): 'Return a nicely formatted representation string' return self . __class__ . __name__ + repr_fmt % self Account dataclass \u00b6 Bank account information. Source code in setu/contract.py class Account : \"\"\"Bank account information.\"\"\" account_number : str account_ifsc : str Amount dataclass \u00b6 Amount information. Source code in setu/contract.py class Amount : \"\"\"Amount information.\"\"\" currency_code : str value : int AmountValidationRule dataclass \u00b6 Amount validation rules, needed when amount_exactness is RANGE . Source code in setu/contract.py class AmountValidationRule : \"\"\"Amount validation rules, needed when amount_exactness is `RANGE`.\"\"\" minimum : int maximum : int BatchRefundStatusResponse dataclass \u00b6 Batch Refund Status Response. Source code in setu/contract.py class BatchRefundStatusResponse : \"\"\"Batch Refund Status Response.\"\"\" batch_id : str refunds : List [ RefundResponseItem ] CreatePaymentLinkResponseData dataclass \u00b6 Response from Create Payment Link API. Source code in setu/contract.py class CreatePaymentLinkResponseData : \"\"\"Response from Create Payment Link API.\"\"\" name : str payment_link : PaymentLink platform_bill_id : str campaign_id : Optional [ str ] = None Deduction dataclass \u00b6 Deduction detail. Source code in setu/contract.py class Deduction : \"\"\"Deduction detail.\"\"\" account : Account split : Amount InitiateBatchRefundResponse dataclass \u00b6 Initiate Batch Refund Response. Source code in setu/contract.py class InitiateBatchRefundResponse : \"\"\"Initiate Batch Refund Response.\"\"\" batch_id : str refunds : List [ Union [ RefundResponseItem , SetuErrorResponseData ]] MockCreditResponseData dataclass \u00b6 Mock Credit response. Source code in setu/contract.py class MockCreditResponseData : \"\"\"Mock Credit response.\"\"\" utr : str PaymentLink dataclass \u00b6 Payment Link information. Source code in setu/contract.py class PaymentLink : \"\"\"Payment Link information.\"\"\" upi_id : str upi_link : str short_url : Optional [ str ] = None PaymentLinkStatusResponseData dataclass \u00b6 Response from Payment Link Status API. Source code in setu/contract.py class PaymentLinkStatusResponseData : \"\"\"Response from Payment Link Status API.\"\"\" created_at : datetime expires_at : datetime name : str payment_link : PaymentLink platform_bill_id : str biller_bill_id : str status : str transaction_note : str campaign_id : Optional [ str ] = None payer_vpa : Optional [ str ] = None receipt : Optional [ Receipt ] = None amount_paid : Optional [ int ] = None additional_info : Optional [ Dict [ str , str ]] = None Receipt dataclass \u00b6 Payment receipt information. Source code in setu/contract.py class Receipt : \"\"\"Payment receipt information.\"\"\" date : datetime id : str RefundRequestItem dataclass \u00b6 Refund request item. Source code in setu/contract.py class RefundRequestItem : \"\"\"Refund request item.\"\"\" identifier : str identifierType : str refundType : str refundAmount : Optional [ int ] = None deductions : Optional [ List [ SplitAccount ]] = None RefundResponseItem dataclass \u00b6 Refund response item. Source code in setu/contract.py class RefundResponseItem : \"\"\"Refund response item.\"\"\" id : str bill_id : str transaction_ref_id : str amount : Amount status : str deductions : Optional [ List [ Deduction ]] = None initiated_at : Optional [ datetime ] = None SettlementSplits dataclass \u00b6 Settlement split instruction for bill. Source code in setu/contract.py class SettlementSplits : \"\"\"Settlement split instruction for bill.\"\"\" parts : List [ SplitAccount ] primary_account : Account SetuAPIException ( Exception ) dataclass \u00b6 Setu exception class. Source code in setu/contract.py class SetuAPIException ( Exception ): \"\"\"Setu exception class.\"\"\" error : SetuErrorResponseData SetuErrorResponseData dataclass \u00b6 Setu error response data. Source code in setu/contract.py class SetuErrorResponseData : \"\"\"Setu error response data.\"\"\" code : str detail : str title : str doc_url : Optional [ str ] = None errors : Optional [ List [ Any ]] = None trace_id : Optional [ str ] = None SetuResponseBase dataclass \u00b6 Setu base response. Source code in setu/contract.py class SetuResponseBase : \"\"\"Setu base response.\"\"\" success : bool status : int SplitAccount ( Account ) dataclass \u00b6 Individual settlement split instruction. Source code in setu/contract.py class SplitAccount ( Account ): \"\"\"Individual settlement split instruction.\"\"\" amount_value : int ValidationRules dataclass \u00b6 Validation rules for bill. Source code in setu/contract.py class ValidationRules : \"\"\"Validation rules for bill.\"\"\" amount_validation : Optional [ AmountValidationRule ] = None source_accounts : Optional [ List [ Account ]] = None deeplink \u00b6 Main module. Deeplink \u00b6 The Deeplink class. Source code in setu/deeplink.py class Deeplink : \"\"\"The Deeplink class.\"\"\" def __init__ ( self , scheme_id : str , secret : str , product_instance_id : str , auth_type : AuthType = \"JWT\" , mode : Mode = \"SANDBOX\" , ): \"\"\"Constructor for the Deeplink class. Args: scheme_id (str): _description_ secret (str): _description_ product_instance_id (str): _description_ auth_type (Literal[\"JWT\", \"OAUTH\"], optional): _description_. Defaults to \"JWT\". mode (Literal[\"SANDBOX\", \"PRODUCTION\"], optional): _description_. Defaults to \"SANDBOX\". \"\"\" self . scheme_id = scheme_id self . secret = secret self . mode = mode self . auth_type = auth_type self . headers = { \"X-Setu-Product-Instance-ID\" : product_instance_id , \"Content-Type\" : \"application/json\" , } self . session = requests . Session () self . session . hooks = { \"response\" : lambda r , * args , ** kwargs : self . exception_handler ( r )} def regenerate_token ( self ): \"\"\"Re-generate token.\"\"\" if self . auth_type == AUTH_TYPE_JWT : authorization = generate_jwt_token ( self . scheme_id , self . secret ) else : authorization = generate_oauth_token ( self . scheme_id , self . secret , self . mode ) self . headers [ \"Authorization\" ] = authorization @staticmethod def exception_handler ( r : Response ): \"\"\"Exception handler.\"\"\" try : r . raise_for_status () except requests . exceptions . RequestException as e : if isinstance ( e , requests . exceptions . HTTPError ) and r . reason == \"Forbidden\" : raise e else : error_response_schema = SetuErrorResponseSchema () raise SetuAPIException ( error_response_schema . load ( r . json ())) class Decorators : \"\"\"Decorators.\"\"\" @staticmethod def auth_handler ( decorated : Callable ): \"\"\"Refresh token.\"\"\" def wrapper ( deeplink , * args , ** kwargs ): try : if deeplink . auth_type == AUTH_TYPE_JWT : deeplink . regenerate_token () return decorated ( deeplink , * args , ** kwargs ) except requests . exceptions . HTTPError : deeplink . regenerate_token () return decorated ( deeplink , * args , ** kwargs ) return wrapper @Decorators . auth_handler def create_payment_link ( self , amount_value : int , biller_bill_id : str , amount_exactness : str , payee_name : str = None , transaction_note : str = None , expiry_date : datetime = None , settlement : SettlementSplits = None , validation_rules : ValidationRules = None , campaign_id : str = None , additional_info : Dict [ str , str ] = None , ) -> CreatePaymentLinkResponseData : \"\"\"Generate UPI payment link.\"\"\" payload : Dict [ str , Any ] = get_create_payment_link_body ( amount_value = amount_value , biller_bill_id = biller_bill_id , amount_exactness = amount_exactness , payee_name = payee_name , transaction_note = transaction_note , expiry_date = expiry_date , settlement = settlement , validation_rules = validation_rules , campaign_id = campaign_id , additional_info = additional_info , ) api_response = self . session . post ( get_url_path ( API . PAYMENT_LINK_BASE , self . auth_type , self . mode ), json = payload , headers = self . headers , ) create_payment_link_response_data_schema = CreatePaymentLinkResponseDataSchema () return create_payment_link_response_data_schema . load ( api_response . json ()[ 'data' ]) @Decorators . auth_handler def check_payment_status ( self , platform_bill_id : str ) -> PaymentLinkStatusResponseData : \"\"\"Check status of UPI payment link.\"\"\" api_response = self . session . get ( \" {} / {} \" . format ( get_url_path ( API . PAYMENT_LINK_BASE , self . auth_type , self . mode ), platform_bill_id , ), headers = self . headers , ) payment_link_status_response_data_schema = PaymentLinkStatusResponseDataSchema () return payment_link_status_response_data_schema . load ( api_response . json ()[ 'data' ]) @Decorators . auth_handler def trigger_mock_payment ( self , amount_value : float , upi_id : str , platform_bill_id : str ) -> MockCreditResponseData : \"\"\"Trigger mock payment for UPI payment link. This API is available only on SANDBOX mode. \"\"\" if self . mode == MODE_PRODUCTION : raise Exception ( \"trigger_mock_payment METHOD IS IS NOT AVAILABLE IN PRODUCTION\" ) payload : Dict [ str , Any ] = get_mock_credit_body ( amount_value = amount_value , upi_id = upi_id , platform_bill_id = platform_bill_id ) api_response = self . session . post ( get_url_path ( API . TRIGGER_MOCK_PAYMENT , self . auth_type , self . mode ), json = payload , headers = self . headers , ) mock_credit_response_data_schema = MockCreditResponseDataSchema () return mock_credit_response_data_schema . load ( api_response . json ()[ 'data' ]) @Decorators . auth_handler def trigger_mock_settlement ( self , utrs : List [ str ]): \"\"\"Trigger mock settlement.\"\"\" payload : Dict [ str , Any ] = get_mock_settlement_body ( utrs = utrs ) self . session . post ( get_url_path ( API . TRIGGER_MOCK_SETTLEMENT , self . auth_type , self . mode ), json = payload , headers = self . headers , ) return @Decorators . auth_handler def initiate_batch_refund ( self , refunds : List [ RefundRequestItem ], ) -> InitiateBatchRefundResponse : \"\"\"Initiate batch refund.\"\"\" payload : Dict [ str , Any ] = get_batch_refund_body ( refunds = refunds ) api_response = self . session . post ( \" {} /batch\" . format ( get_url_path ( API . REFUNDS_BASE , self . auth_type , self . mode )), json = payload , headers = self . headers , ) initiate_batch_refund_response_data_schema = InitiateBatchRefundResponseDataSchema () return initiate_batch_refund_response_data_schema . load ( api_response . json ()[ 'data' ]) @Decorators . auth_handler def get_batch_refund_status ( self , batch_refund_id : str ) -> BatchRefundStatusResponse : \"\"\"Get batch refund status.\"\"\" api_response = self . session . get ( \" {} /batch/ {} \" . format ( get_url_path ( API . REFUNDS_BASE , self . auth_type , self . mode ), batch_refund_id ), headers = self . headers , ) batch_refund_status_response_schema = BatchRefundStatusResponseSchema () return batch_refund_status_response_schema . load ( api_response . json ()[ 'data' ]) @Decorators . auth_handler def get_refund_status ( self , refund_id : str ) -> RefundResponseItem : \"\"\"Get individual refund status.\"\"\" api_response = self . session . get ( \" {} / {} \" . format ( get_url_path ( API . REFUNDS_BASE , self . auth_type , self . mode ), refund_id ), headers = self . headers , ) refund_response_item_schema = RefundResponseItemSchema () return refund_response_item_schema . load ( api_response . json ()[ 'data' ]) Decorators \u00b6 Decorators. Source code in setu/deeplink.py class Decorators : \"\"\"Decorators.\"\"\" @staticmethod def auth_handler ( decorated : Callable ): \"\"\"Refresh token.\"\"\" def wrapper ( deeplink , * args , ** kwargs ): try : if deeplink . auth_type == AUTH_TYPE_JWT : deeplink . regenerate_token () return decorated ( deeplink , * args , ** kwargs ) except requests . exceptions . HTTPError : deeplink . regenerate_token () return decorated ( deeplink , * args , ** kwargs ) return wrapper auth_handler ( decorated ) staticmethod \u00b6 Refresh token. Source code in setu/deeplink.py @staticmethod def auth_handler ( decorated : Callable ): \"\"\"Refresh token.\"\"\" def wrapper ( deeplink , * args , ** kwargs ): try : if deeplink . auth_type == AUTH_TYPE_JWT : deeplink . regenerate_token () return decorated ( deeplink , * args , ** kwargs ) except requests . exceptions . HTTPError : deeplink . regenerate_token () return decorated ( deeplink , * args , ** kwargs ) return wrapper __init__ ( self , scheme_id , secret , product_instance_id , auth_type = 'JWT' , mode = 'SANDBOX' ) special \u00b6 Constructor for the Deeplink class. Parameters: Name Type Description Default scheme_id str description required secret str description required product_instance_id str description required auth_type Literal[\"JWT\", \"OAUTH\"] description . Defaults to \"JWT\". 'JWT' mode Literal[\"SANDBOX\", \"PRODUCTION\"] description . Defaults to \"SANDBOX\". 'SANDBOX' Source code in setu/deeplink.py def __init__ ( self , scheme_id : str , secret : str , product_instance_id : str , auth_type : AuthType = \"JWT\" , mode : Mode = \"SANDBOX\" , ): \"\"\"Constructor for the Deeplink class. Args: scheme_id (str): _description_ secret (str): _description_ product_instance_id (str): _description_ auth_type (Literal[\"JWT\", \"OAUTH\"], optional): _description_. Defaults to \"JWT\". mode (Literal[\"SANDBOX\", \"PRODUCTION\"], optional): _description_. Defaults to \"SANDBOX\". \"\"\" self . scheme_id = scheme_id self . secret = secret self . mode = mode self . auth_type = auth_type self . headers = { \"X-Setu-Product-Instance-ID\" : product_instance_id , \"Content-Type\" : \"application/json\" , } self . session = requests . Session () self . session . hooks = { \"response\" : lambda r , * args , ** kwargs : self . exception_handler ( r )} exception_handler ( r ) staticmethod \u00b6 Exception handler. Source code in setu/deeplink.py @staticmethod def exception_handler ( r : Response ): \"\"\"Exception handler.\"\"\" try : r . raise_for_status () except requests . exceptions . RequestException as e : if isinstance ( e , requests . exceptions . HTTPError ) and r . reason == \"Forbidden\" : raise e else : error_response_schema = SetuErrorResponseSchema () raise SetuAPIException ( error_response_schema . load ( r . json ())) regenerate_token ( self ) \u00b6 Re-generate token. Source code in setu/deeplink.py def regenerate_token ( self ): \"\"\"Re-generate token.\"\"\" if self . auth_type == AUTH_TYPE_JWT : authorization = generate_jwt_token ( self . scheme_id , self . secret ) else : authorization = generate_oauth_token ( self . scheme_id , self . secret , self . mode ) self . headers [ \"Authorization\" ] = authorization endpoint \u00b6 Endpoint module. get_url_path ( endpoint , auth_type = 'JWT' , mode = 'SANDBOX' ) \u00b6 Get URL for API. Parameters: Name Type Description Default endpoint API description required auth_type AuthType description . Defaults to \"JWT\". 'JWT' mode Mode description . Defaults to \"SANDBOX\". 'SANDBOX' Returns: Type Description str description Source code in setu/endpoint.py def get_url_path ( endpoint : API , auth_type : AuthType = \"JWT\" , mode : Mode = \"SANDBOX\" , ) -> str : \"\"\"Get URL for API. Args: endpoint (API): _description_ auth_type (AuthType, optional): _description_. Defaults to \"JWT\". mode (Mode, optional): _description_. Defaults to \"SANDBOX\". Returns: str: _description_ \"\"\" return \" {base_url}{api_version}{path} \" . format ( base_url = PRODUCTION_BASE if mode == MODE_PRODUCTION else SANDBOX_BASE , api_version = \"/v2\" if auth_type == AUTH_TYPE_OAUTH else \"\" , path = endpoint . value , ) serial \u00b6 Marshmallow serialization classes. AccountSchema ( Schema ) marshmallow-model \u00b6 Account Schema. Source code in setu/serial.py class AccountSchema ( Schema ): \"\"\"Account Schema.\"\"\" account_number = fields . Str ( data_key = \"id\" ) account_ifsc = fields . Str ( data_key = \"ifsc\" ) name = fields . Str ( required = False ) @post_load def make_account ( self , data , ** kwargs ): \"\"\"Deserialize to Account object.\"\"\" return Account ( ** data ) make_account ( self , data , ** kwargs ) \u00b6 Deserialize to Account object. Source code in setu/serial.py @post_load def make_account ( self , data , ** kwargs ): \"\"\"Deserialize to Account object.\"\"\" return Account ( ** data ) AmountSchema ( Schema ) marshmallow-model \u00b6 Amount Schema. Source code in setu/serial.py class AmountSchema ( Schema ): \"\"\"Amount Schema.\"\"\" currency_code = fields . Str ( data_key = \"currencyCode\" ) value = fields . Int () @post_load def make_amount ( self , data , ** kwargs ): \"\"\"Deserialize to Amount object.\"\"\" return Amount ( ** data ) make_amount ( self , data , ** kwargs ) \u00b6 Deserialize to Amount object. Source code in setu/serial.py @post_load def make_amount ( self , data , ** kwargs ): \"\"\"Deserialize to Amount object.\"\"\" return Amount ( ** data ) BatchRefundResponseItemSchema ( OneOfSchema ) marshmallow-model \u00b6 Batch Refund Response Data Item Schema. Source code in setu/serial.py class BatchRefundResponseItemSchema ( OneOfSchema ): \"\"\"Batch Refund Response Data Item Schema.\"\"\" type_field = \"success\" type_schemas = { True : RefundResponseItemSchema , False : SetuErrorResponseDataSchema } seq_no = fields . Int ( data_key = \"seqNo\" ) success = fields . Bool () BatchRefundStatusResponseSchema ( Schema ) marshmallow-model \u00b6 Get Batch Refund Status Response Data Schema. Source code in setu/serial.py class BatchRefundStatusResponseSchema ( Schema ): \"\"\"Get Batch Refund Status Response Data Schema.\"\"\" batch_id = fields . Str ( data_key = \"batchID\" ) refunds = fields . List ( fields . Nested ( RefundResponseItemSchema ())) @post_load def make_batch_refund_response ( self , data , ** kwargs ): \"\"\"Deserialize to BatchRefundStatusResponse object.\"\"\" return BatchRefundStatusResponse ( ** data ) make_batch_refund_response ( self , data , ** kwargs ) \u00b6 Deserialize to BatchRefundStatusResponse object. Source code in setu/serial.py @post_load def make_batch_refund_response ( self , data , ** kwargs ): \"\"\"Deserialize to BatchRefundStatusResponse object.\"\"\" return BatchRefundStatusResponse ( ** data ) CreatePaymentLinkResponseDataSchema ( Schema ) marshmallow-model \u00b6 Create Payment Link Response Data Schema. Source code in setu/serial.py class CreatePaymentLinkResponseDataSchema ( Schema ): \"\"\"Create Payment Link Response Data Schema.\"\"\" name = fields . Str () payment_link = fields . Nested ( PaymentLinkSchema (), data_key = \"paymentLink\" ) platform_bill_id = fields . Str ( data_key = \"platformBillID\" ) campaign_id = fields . Str ( data_key = \"campaignID\" ) @post_load def make_create_payment_link_response ( self , data , ** kwargs ): \"\"\"Deserialize to CreatePaymentLinkResponseData object.\"\"\" return CreatePaymentLinkResponseData ( ** data ) make_create_payment_link_response ( self , data , ** kwargs ) \u00b6 Deserialize to CreatePaymentLinkResponseData object. Source code in setu/serial.py @post_load def make_create_payment_link_response ( self , data , ** kwargs ): \"\"\"Deserialize to CreatePaymentLinkResponseData object.\"\"\" return CreatePaymentLinkResponseData ( ** data ) DeductionResponseSchema ( Schema ) marshmallow-model \u00b6 Deduction Response Schema. Source code in setu/serial.py class DeductionResponseSchema ( Schema ): \"\"\"Deduction Response Schema.\"\"\" account = fields . Nested ( AccountSchema ()) split = fields . Nested ( SplitDetailsSchema ()) InitiateBatchRefundResponseDataSchema ( Schema ) marshmallow-model \u00b6 Initiate Batch Refund Response Data Schema. Source code in setu/serial.py class InitiateBatchRefundResponseDataSchema ( Schema ): \"\"\"Initiate Batch Refund Response Data Schema.\"\"\" batch_id = fields . Str ( data_key = \"batchID\" ) refunds = fields . List ( fields . Nested ( BatchRefundResponseItemSchema ( unknown = EXCLUDE ))) @post_load def make_initiate_batch_refund_response_data ( self , data , ** kwargs ): \"\"\"Deserialize to InitiateBatchRefundResponse object.\"\"\" return InitiateBatchRefundResponse ( ** data ) make_initiate_batch_refund_response_data ( self , data , ** kwargs ) \u00b6 Deserialize to InitiateBatchRefundResponse object. Source code in setu/serial.py @post_load def make_initiate_batch_refund_response_data ( self , data , ** kwargs ): \"\"\"Deserialize to InitiateBatchRefundResponse object.\"\"\" return InitiateBatchRefundResponse ( ** data ) MockCreditResponseDataSchema ( Schema ) marshmallow-model \u00b6 Mock Credit Response Data Schema. Source code in setu/serial.py class MockCreditResponseDataSchema ( Schema ): \"\"\"Mock Credit Response Data Schema.\"\"\" utr = fields . Str () @post_load def make_mock_credit_response ( self , data , ** kwargs ): \"\"\"Deserialize to MockCreditResponseData.\"\"\" return MockCreditResponseData ( ** data ) make_mock_credit_response ( self , data , ** kwargs ) \u00b6 Deserialize to MockCreditResponseData. Source code in setu/serial.py @post_load def make_mock_credit_response ( self , data , ** kwargs ): \"\"\"Deserialize to MockCreditResponseData.\"\"\" return MockCreditResponseData ( ** data ) PaymentLinkSchema ( Schema ) marshmallow-model \u00b6 Payment Link information schema. Source code in setu/serial.py class PaymentLinkSchema ( Schema ): \"\"\"Payment Link information schema.\"\"\" short_url = fields . Str ( data_key = \"shortURL\" , required = False ) upi_id = fields . Str ( data_key = \"upiID\" ) upi_link = fields . Str ( data_key = \"upiLink\" ) @post_load def make_payment_link ( self , data , ** kwargs ): \"\"\"Deserialize to PaymentLink object.\"\"\" return PaymentLink ( ** data ) make_payment_link ( self , data , ** kwargs ) \u00b6 Deserialize to PaymentLink object. Source code in setu/serial.py @post_load def make_payment_link ( self , data , ** kwargs ): \"\"\"Deserialize to PaymentLink object.\"\"\" return PaymentLink ( ** data ) PaymentLinkStatusResponseDataSchema ( Schema ) marshmallow-model \u00b6 Payment Link Status Response Data Schema. Source code in setu/serial.py class PaymentLinkStatusResponseDataSchema ( Schema ): \"\"\"Payment Link Status Response Data Schema.\"\"\" created_at = fields . DateTime ( data_key = \"createdAt\" ) expires_at = fields . DateTime ( data_key = \"expiresAt\" ) name = fields . Str () payment_link = fields . Nested ( PaymentLinkSchema (), data_key = \"paymentLink\" ) platform_bill_id = fields . Str ( data_key = \"platformBillID\" ) biller_bill_id = fields . Str ( data_key = \"billerBillID\" ) status = fields . Str () transaction_note = fields . Str ( data_key = \"transactionNote\" ) campaign_id = fields . Str ( data_key = \"campaignID\" , required = False ) payer_vpa = fields . Str ( data_key = \"payerVpa\" , required = False ) receipt = fields . Nested ( ReceiptSchema (), required = False ) amount_paid = fields . Nested ( AmountSchema (), data_key = \"amountPaid\" , required = False ) additional_info = fields . Dict ( keys = fields . Str (), values = fields . Str (), data_key = \"additionalInfo\" , required = False ) @post_load def make_payment_link_status_response ( self , data , ** kwargs ): \"\"\"Deserialize to PaymentLinkStatusResponseData.\"\"\" return PaymentLinkStatusResponseData ( ** data ) make_payment_link_status_response ( self , data , ** kwargs ) \u00b6 Deserialize to PaymentLinkStatusResponseData. Source code in setu/serial.py @post_load def make_payment_link_status_response ( self , data , ** kwargs ): \"\"\"Deserialize to PaymentLinkStatusResponseData.\"\"\" return PaymentLinkStatusResponseData ( ** data ) ReceiptSchema ( Schema ) marshmallow-model \u00b6 Receipt Schema. Source code in setu/serial.py class ReceiptSchema ( Schema ): \"\"\"Receipt Schema.\"\"\" date = fields . DateTime () id = fields . Str () @post_load def make_receipt ( self , data , ** kwargs ): \"\"\"Deserialize to Receipt object.\"\"\" return Receipt ( ** data ) make_receipt ( self , data , ** kwargs ) \u00b6 Deserialize to Receipt object. Source code in setu/serial.py @post_load def make_receipt ( self , data , ** kwargs ): \"\"\"Deserialize to Receipt object.\"\"\" return Receipt ( ** data ) RefundResponseItemSchema ( Schema ) marshmallow-model \u00b6 Refund Response Item Schema. Source code in setu/serial.py class RefundResponseItemSchema ( Schema ): \"\"\"Refund Response Item Schema.\"\"\" id = fields . Str () bill_id = fields . Str ( data_key = \"billID\" ) transaction_ref_id = fields . Str ( data_key = \"transactionRefID\" ) amount = fields . Nested ( AmountSchema ()) status = fields . Str () deductions = fields . List ( fields . Nested ( DeductionResponseSchema ()), required = False ) initiated_at = fields . DateTime ( data_key = \"initiatedAt\" , required = False ) @post_load def make_refund_response_item ( self , data , ** kwargs ): \"\"\"Deserialize to RefundResponseItem object.\"\"\" return RefundResponseItem ( ** data ) make_refund_response_item ( self , data , ** kwargs ) \u00b6 Deserialize to RefundResponseItem object. Source code in setu/serial.py @post_load def make_refund_response_item ( self , data , ** kwargs ): \"\"\"Deserialize to RefundResponseItem object.\"\"\" return RefundResponseItem ( ** data ) SetuErrorResponseDataSchema ( Schema ) marshmallow-model \u00b6 Setu Error Response Data Schema. Source code in setu/serial.py class SetuErrorResponseDataSchema ( Schema ): \"\"\"Setu Error Response Data Schema.\"\"\" code = fields . Str () detail = fields . Str () title = fields . Str () doc_url = fields . Str ( data_key = \"docURL\" , required = False ) errors = fields . List ( fields . Str (), required = False ) trace_id = fields . Str ( data_key = \"traceID\" , required = False ) @post_load def make_error_response_data ( self , data , ** kwargs ): \"\"\"Deserialize to SetuErrorResponseData object.\"\"\" return SetuErrorResponseData ( ** data ) make_error_response_data ( self , data , ** kwargs ) \u00b6 Deserialize to SetuErrorResponseData object. Source code in setu/serial.py @post_load def make_error_response_data ( self , data , ** kwargs ): \"\"\"Deserialize to SetuErrorResponseData object.\"\"\" return SetuErrorResponseData ( ** data ) SetuErrorResponseSchema ( SetuResponseBaseSchema ) marshmallow-model \u00b6 Setu Error Response Schema. Source code in setu/serial.py class SetuErrorResponseSchema ( SetuResponseBaseSchema ): \"\"\"Setu Error Response Schema.\"\"\" error_response = fields . Nested ( SetuErrorResponseDataSchema (), data_key = \"error\" ) @post_load def make_error_response ( self , data , ** kwargs ): \"\"\"Deserialize to SetuErrorResponseData object.\"\"\" return data [ \"error_response\" ] make_error_response ( self , data , ** kwargs ) \u00b6 Deserialize to SetuErrorResponseData object. Source code in setu/serial.py @post_load def make_error_response ( self , data , ** kwargs ): \"\"\"Deserialize to SetuErrorResponseData object.\"\"\" return data [ \"error_response\" ] SetuResponseBaseSchema ( Schema ) marshmallow-model \u00b6 Setu Base Response Schema. Source code in setu/serial.py class SetuResponseBaseSchema ( Schema ): \"\"\"Setu Base Response Schema.\"\"\" status = fields . Int () success = fields . Bool () SplitDetailsSchema ( Schema ) marshmallow-model \u00b6 Split Details Schema. Source code in setu/serial.py class SplitDetailsSchema ( Schema ): \"\"\"Split Details Schema.\"\"\" value = fields . Int () unit = fields . Str ()","title":"Modules"},{"location":"api/#setu.auth","text":"Auth module.","title":"auth"},{"location":"api/#setu.auth.generate_jwt_token","text":"Generate a JWT token. Parameters: Name Type Description Default scheme_id str description required secret str description required Returns: Type Description str description Source code in setu/auth.py def generate_jwt_token ( scheme_id : str , secret : str ) -> str : \"\"\"Generate a JWT token. Args: scheme_id (str): _description_ secret (str): _description_ Returns: str: _description_ \"\"\" payload = { \"aud\" : scheme_id , \"iat\" : datetime . datetime . utcnow (), \"jti\" : str ( uuid . uuid1 ()), } return \"Bearer {} \" . format ( jwt . encode ( payload , secret , algorithm = \"HS256\" ))","title":"generate_jwt_token()"},{"location":"api/#setu.auth.generate_oauth_token","text":"Generate an OAuth token. Parameters: Name Type Description Default client_id str description required secret str description required mode Mode description . Defaults to \"SANDBOX\". 'SANDBOX' Returns: Type Description str description Source code in setu/auth.py def generate_oauth_token ( client_id : str , secret : str , mode : Mode = \"SANDBOX\" , ) -> str : \"\"\"Generate an OAuth token. Args: client_id (str): _description_ secret (str): _description_ mode (Mode, optional): _description_. Defaults to \"SANDBOX\". Returns: str: _description_ \"\"\" payload = { \"clientID\" : client_id , \"secret\" : secret , } headers = { \"Content-Type\" : \"application/json\" } response = requests . post ( get_url_path ( API . FETCH_TOKEN , AUTH_TYPE_OAUTH , mode ), json = payload , headers = headers , ) if response . status_code == 200 : data = response . json () return \"Bearer {} \" . format ( data [ \"data\" ][ \"token\" ]) raise","title":"generate_oauth_token()"},{"location":"api/#setu.body","text":"Body builder helper module.","title":"body"},{"location":"api/#setu.body.get_batch_refund_body","text":"Get the payload for Initiate Batch Refund API. Source code in setu/body.py def get_batch_refund_body ( ** kwargs ) -> Dict [ str , Any ]: \"\"\"Get the payload for Initiate Batch Refund API.\"\"\" payload = { \"refunds\" : [ { \"seqNo\" : i , \"identifier\" : refund . identifier , \"identifierType\" : refund . identifierType , \"refundType\" : refund . refundType , \"refundAmount\" : refund . refundAmount , \"deductions\" : [ { \"account\" : { \"id\" : deduction . account_number , \"ifsc\" : deduction . account_ifsc }, \"split\" : { \"value\" : deduction . amount_value , \"unit\" : \"INR\" }, } for deduction in ( refund . deductions if refund . deductions is not None else []) ], } for i , refund in enumerate ( cast ( List [ RefundRequestItem ], kwargs [ 'refunds' ])) ], } return payload","title":"get_batch_refund_body()"},{"location":"api/#setu.body.get_create_payment_link_body","text":"Get the payload for Create Payment Link API. Source code in setu/body.py def get_create_payment_link_body ( ** kwargs ) -> Dict [ str , Any ]: \"\"\"Get the payload for Create Payment Link API.\"\"\" payload : Dict [ str , Any ] = { \"amount\" : { \"currencyCode\" : \"INR\" , \"value\" : kwargs [ 'amount_value' ]}, \"amountExactness\" : kwargs [ 'amount_exactness' ], \"billerBillID\" : kwargs [ 'biller_bill_id' ], } if kwargs [ 'payee_name' ] is not None : payload . update ({ \"name\" : kwargs [ 'payee_name' ]}) if kwargs [ 'transaction_note' ] is not None : payload . update ({ \"transactionNote\" : kwargs [ 'transaction_note' ]}) if kwargs [ 'expiry_date' ] is not None : expiry_date_str = kwargs [ 'expiry_date' ] . replace ( microsecond = 0 ) . isoformat () + \"Z\" payload . update ({ \"expiryDate\" : expiry_date_str }) if kwargs [ 'settlement' ] is not None : payload . update ( { \"settlement\" : { \"parts\" : [ { \"account\" : { \"id\" : part . account_number , \"ifsc\" : part . account_ifsc , }, \"split\" : { \"unit\" : \"INR\" , \"value\" : part . amount_value , }, } for part in kwargs [ 'settlement' ] . parts ], \"primaryAccount\" : { \"id\" : kwargs [ 'settlement' ] . primary_account . account_number , \"ifsc\" : kwargs [ 'settlement' ] . primary_account . account_ifsc , }, } } ) if kwargs [ 'validation_rules' ] is not None : vr : Dict [ str , Any ] = {} if kwargs [ 'validation_rules' ] . amount_validation is not None : vr . update ( { \"amount\" : { \"maximum\" : kwargs [ 'validation_rules' ] . amount_validation . maximum , \"minimum\" : kwargs [ 'validation_rules' ] . amount_validation . minimum , } } ) if kwargs [ 'validation_rules' ] . source_accounts is not None : vr . update ( { \"sourceAccounts\" : [ { \"number\" : source_account . account_number , \"ifsc\" : source_account . account_ifsc } for source_account in kwargs [ 'validation_rules' ] . source_accounts ] } ) payload . update ({ \"validationRules\" : vr }) if kwargs [ 'additional_info' ] is not None : payload . update ({ \"additionalInfo\" : kwargs [ 'additional_info' ]}) if kwargs [ 'campaign_id' ] is not None : payload . update ({ \"campaignID\" : kwargs [ 'campaign_id' ]}) return payload","title":"get_create_payment_link_body()"},{"location":"api/#setu.body.get_mock_credit_body","text":"Get the payload for Mock Credit API. Source code in setu/body.py def get_mock_credit_body ( ** kwargs ) -> Dict [ str , Any ]: \"\"\"Get the payload for Mock Credit API.\"\"\" payload = { \"amount\" : kwargs [ 'amount_value' ], \"type\" : \"UPI\" , \"sourceAccount\" : { \"accountID\" : \"customer@vpa\" }, \"destinationAccount\" : { \"accountID\" : kwargs [ 'upi_id' ]}, \"transactionReference\" : kwargs [ \"platform_bill_id\" ], } return payload","title":"get_mock_credit_body()"},{"location":"api/#setu.body.get_mock_settlement_body","text":"Get the payload for Mock Settlement API. Source code in setu/body.py def get_mock_settlement_body ( ** kwargs ) -> Dict [ str , Any ]: \"\"\"Get the payload for Mock Settlement API.\"\"\" transactions = [{ \"utr\" : utr } for utr in kwargs [ 'utrs' ]] payload = { \"transactions\" : transactions } return payload","title":"get_mock_settlement_body()"},{"location":"api/#setu.contract","text":"Contract module.","title":"contract"},{"location":"api/#setu.contract.API","text":"Enum containing all the API paths supported by SDK. Source code in setu/contract.py class API ( Enum ): \"\"\"Enum containing all the API paths supported by SDK.\"\"\" FETCH_TOKEN = \"/auth/token\" PAYMENT_LINK_BASE = \"/payment-links\" TRIGGER_MOCK_PAYMENT = \"/triggers/funds/addCredit\" TRIGGER_MOCK_SETTLEMENT = \"/triggers/funds/mockSettlement\" EXPIRE_BILL = \"/utilities/bills/ {} /expire\" REPORTS_BASE = \"/reports\" REFUNDS_BASE = \"/refund\"","title":"API"},{"location":"api/#setu.contract.APICredentials","text":"API Credential information. Source code in setu/contract.py class APICredentials ( NamedTuple ): \"\"\"API Credential information.\"\"\" scheme_id : str secret : str","title":"APICredentials"},{"location":"api/#setu.contract.APICredentials.__getnewargs__","text":"Return self as a plain tuple. Used by copy and pickle. Source code in setu/contract.py def __getnewargs__ ( self ): 'Return self as a plain tuple. Used by copy and pickle.' return _tuple ( self )","title":"__getnewargs__()"},{"location":"api/#setu.contract.APICredentials.__new__","text":"Create new instance of APICredentials(scheme_id, secret)","title":"__new__()"},{"location":"api/#setu.contract.APICredentials.__repr__","text":"Return a nicely formatted representation string Source code in setu/contract.py def __repr__ ( self ): 'Return a nicely formatted representation string' return self . __class__ . __name__ + repr_fmt % self","title":"__repr__()"},{"location":"api/#setu.contract.Account","text":"Bank account information. Source code in setu/contract.py class Account : \"\"\"Bank account information.\"\"\" account_number : str account_ifsc : str","title":"Account"},{"location":"api/#setu.contract.Amount","text":"Amount information. Source code in setu/contract.py class Amount : \"\"\"Amount information.\"\"\" currency_code : str value : int","title":"Amount"},{"location":"api/#setu.contract.AmountValidationRule","text":"Amount validation rules, needed when amount_exactness is RANGE . Source code in setu/contract.py class AmountValidationRule : \"\"\"Amount validation rules, needed when amount_exactness is `RANGE`.\"\"\" minimum : int maximum : int","title":"AmountValidationRule"},{"location":"api/#setu.contract.BatchRefundStatusResponse","text":"Batch Refund Status Response. Source code in setu/contract.py class BatchRefundStatusResponse : \"\"\"Batch Refund Status Response.\"\"\" batch_id : str refunds : List [ RefundResponseItem ]","title":"BatchRefundStatusResponse"},{"location":"api/#setu.contract.CreatePaymentLinkResponseData","text":"Response from Create Payment Link API. Source code in setu/contract.py class CreatePaymentLinkResponseData : \"\"\"Response from Create Payment Link API.\"\"\" name : str payment_link : PaymentLink platform_bill_id : str campaign_id : Optional [ str ] = None","title":"CreatePaymentLinkResponseData"},{"location":"api/#setu.contract.Deduction","text":"Deduction detail. Source code in setu/contract.py class Deduction : \"\"\"Deduction detail.\"\"\" account : Account split : Amount","title":"Deduction"},{"location":"api/#setu.contract.InitiateBatchRefundResponse","text":"Initiate Batch Refund Response. Source code in setu/contract.py class InitiateBatchRefundResponse : \"\"\"Initiate Batch Refund Response.\"\"\" batch_id : str refunds : List [ Union [ RefundResponseItem , SetuErrorResponseData ]]","title":"InitiateBatchRefundResponse"},{"location":"api/#setu.contract.MockCreditResponseData","text":"Mock Credit response. Source code in setu/contract.py class MockCreditResponseData : \"\"\"Mock Credit response.\"\"\" utr : str","title":"MockCreditResponseData"},{"location":"api/#setu.contract.PaymentLink","text":"Payment Link information. Source code in setu/contract.py class PaymentLink : \"\"\"Payment Link information.\"\"\" upi_id : str upi_link : str short_url : Optional [ str ] = None","title":"PaymentLink"},{"location":"api/#setu.contract.PaymentLinkStatusResponseData","text":"Response from Payment Link Status API. Source code in setu/contract.py class PaymentLinkStatusResponseData : \"\"\"Response from Payment Link Status API.\"\"\" created_at : datetime expires_at : datetime name : str payment_link : PaymentLink platform_bill_id : str biller_bill_id : str status : str transaction_note : str campaign_id : Optional [ str ] = None payer_vpa : Optional [ str ] = None receipt : Optional [ Receipt ] = None amount_paid : Optional [ int ] = None additional_info : Optional [ Dict [ str , str ]] = None","title":"PaymentLinkStatusResponseData"},{"location":"api/#setu.contract.Receipt","text":"Payment receipt information. Source code in setu/contract.py class Receipt : \"\"\"Payment receipt information.\"\"\" date : datetime id : str","title":"Receipt"},{"location":"api/#setu.contract.RefundRequestItem","text":"Refund request item. Source code in setu/contract.py class RefundRequestItem : \"\"\"Refund request item.\"\"\" identifier : str identifierType : str refundType : str refundAmount : Optional [ int ] = None deductions : Optional [ List [ SplitAccount ]] = None","title":"RefundRequestItem"},{"location":"api/#setu.contract.RefundResponseItem","text":"Refund response item. Source code in setu/contract.py class RefundResponseItem : \"\"\"Refund response item.\"\"\" id : str bill_id : str transaction_ref_id : str amount : Amount status : str deductions : Optional [ List [ Deduction ]] = None initiated_at : Optional [ datetime ] = None","title":"RefundResponseItem"},{"location":"api/#setu.contract.SettlementSplits","text":"Settlement split instruction for bill. Source code in setu/contract.py class SettlementSplits : \"\"\"Settlement split instruction for bill.\"\"\" parts : List [ SplitAccount ] primary_account : Account","title":"SettlementSplits"},{"location":"api/#setu.contract.SetuAPIException","text":"Setu exception class. Source code in setu/contract.py class SetuAPIException ( Exception ): \"\"\"Setu exception class.\"\"\" error : SetuErrorResponseData","title":"SetuAPIException"},{"location":"api/#setu.contract.SetuErrorResponseData","text":"Setu error response data. Source code in setu/contract.py class SetuErrorResponseData : \"\"\"Setu error response data.\"\"\" code : str detail : str title : str doc_url : Optional [ str ] = None errors : Optional [ List [ Any ]] = None trace_id : Optional [ str ] = None","title":"SetuErrorResponseData"},{"location":"api/#setu.contract.SetuResponseBase","text":"Setu base response. Source code in setu/contract.py class SetuResponseBase : \"\"\"Setu base response.\"\"\" success : bool status : int","title":"SetuResponseBase"},{"location":"api/#setu.contract.SplitAccount","text":"Individual settlement split instruction. Source code in setu/contract.py class SplitAccount ( Account ): \"\"\"Individual settlement split instruction.\"\"\" amount_value : int","title":"SplitAccount"},{"location":"api/#setu.contract.ValidationRules","text":"Validation rules for bill. Source code in setu/contract.py class ValidationRules : \"\"\"Validation rules for bill.\"\"\" amount_validation : Optional [ AmountValidationRule ] = None source_accounts : Optional [ List [ Account ]] = None","title":"ValidationRules"},{"location":"api/#setu.deeplink","text":"Main module.","title":"deeplink"},{"location":"api/#setu.deeplink.Deeplink","text":"The Deeplink class. Source code in setu/deeplink.py class Deeplink : \"\"\"The Deeplink class.\"\"\" def __init__ ( self , scheme_id : str , secret : str , product_instance_id : str , auth_type : AuthType = \"JWT\" , mode : Mode = \"SANDBOX\" , ): \"\"\"Constructor for the Deeplink class. Args: scheme_id (str): _description_ secret (str): _description_ product_instance_id (str): _description_ auth_type (Literal[\"JWT\", \"OAUTH\"], optional): _description_. Defaults to \"JWT\". mode (Literal[\"SANDBOX\", \"PRODUCTION\"], optional): _description_. Defaults to \"SANDBOX\". \"\"\" self . scheme_id = scheme_id self . secret = secret self . mode = mode self . auth_type = auth_type self . headers = { \"X-Setu-Product-Instance-ID\" : product_instance_id , \"Content-Type\" : \"application/json\" , } self . session = requests . Session () self . session . hooks = { \"response\" : lambda r , * args , ** kwargs : self . exception_handler ( r )} def regenerate_token ( self ): \"\"\"Re-generate token.\"\"\" if self . auth_type == AUTH_TYPE_JWT : authorization = generate_jwt_token ( self . scheme_id , self . secret ) else : authorization = generate_oauth_token ( self . scheme_id , self . secret , self . mode ) self . headers [ \"Authorization\" ] = authorization @staticmethod def exception_handler ( r : Response ): \"\"\"Exception handler.\"\"\" try : r . raise_for_status () except requests . exceptions . RequestException as e : if isinstance ( e , requests . exceptions . HTTPError ) and r . reason == \"Forbidden\" : raise e else : error_response_schema = SetuErrorResponseSchema () raise SetuAPIException ( error_response_schema . load ( r . json ())) class Decorators : \"\"\"Decorators.\"\"\" @staticmethod def auth_handler ( decorated : Callable ): \"\"\"Refresh token.\"\"\" def wrapper ( deeplink , * args , ** kwargs ): try : if deeplink . auth_type == AUTH_TYPE_JWT : deeplink . regenerate_token () return decorated ( deeplink , * args , ** kwargs ) except requests . exceptions . HTTPError : deeplink . regenerate_token () return decorated ( deeplink , * args , ** kwargs ) return wrapper @Decorators . auth_handler def create_payment_link ( self , amount_value : int , biller_bill_id : str , amount_exactness : str , payee_name : str = None , transaction_note : str = None , expiry_date : datetime = None , settlement : SettlementSplits = None , validation_rules : ValidationRules = None , campaign_id : str = None , additional_info : Dict [ str , str ] = None , ) -> CreatePaymentLinkResponseData : \"\"\"Generate UPI payment link.\"\"\" payload : Dict [ str , Any ] = get_create_payment_link_body ( amount_value = amount_value , biller_bill_id = biller_bill_id , amount_exactness = amount_exactness , payee_name = payee_name , transaction_note = transaction_note , expiry_date = expiry_date , settlement = settlement , validation_rules = validation_rules , campaign_id = campaign_id , additional_info = additional_info , ) api_response = self . session . post ( get_url_path ( API . PAYMENT_LINK_BASE , self . auth_type , self . mode ), json = payload , headers = self . headers , ) create_payment_link_response_data_schema = CreatePaymentLinkResponseDataSchema () return create_payment_link_response_data_schema . load ( api_response . json ()[ 'data' ]) @Decorators . auth_handler def check_payment_status ( self , platform_bill_id : str ) -> PaymentLinkStatusResponseData : \"\"\"Check status of UPI payment link.\"\"\" api_response = self . session . get ( \" {} / {} \" . format ( get_url_path ( API . PAYMENT_LINK_BASE , self . auth_type , self . mode ), platform_bill_id , ), headers = self . headers , ) payment_link_status_response_data_schema = PaymentLinkStatusResponseDataSchema () return payment_link_status_response_data_schema . load ( api_response . json ()[ 'data' ]) @Decorators . auth_handler def trigger_mock_payment ( self , amount_value : float , upi_id : str , platform_bill_id : str ) -> MockCreditResponseData : \"\"\"Trigger mock payment for UPI payment link. This API is available only on SANDBOX mode. \"\"\" if self . mode == MODE_PRODUCTION : raise Exception ( \"trigger_mock_payment METHOD IS IS NOT AVAILABLE IN PRODUCTION\" ) payload : Dict [ str , Any ] = get_mock_credit_body ( amount_value = amount_value , upi_id = upi_id , platform_bill_id = platform_bill_id ) api_response = self . session . post ( get_url_path ( API . TRIGGER_MOCK_PAYMENT , self . auth_type , self . mode ), json = payload , headers = self . headers , ) mock_credit_response_data_schema = MockCreditResponseDataSchema () return mock_credit_response_data_schema . load ( api_response . json ()[ 'data' ]) @Decorators . auth_handler def trigger_mock_settlement ( self , utrs : List [ str ]): \"\"\"Trigger mock settlement.\"\"\" payload : Dict [ str , Any ] = get_mock_settlement_body ( utrs = utrs ) self . session . post ( get_url_path ( API . TRIGGER_MOCK_SETTLEMENT , self . auth_type , self . mode ), json = payload , headers = self . headers , ) return @Decorators . auth_handler def initiate_batch_refund ( self , refunds : List [ RefundRequestItem ], ) -> InitiateBatchRefundResponse : \"\"\"Initiate batch refund.\"\"\" payload : Dict [ str , Any ] = get_batch_refund_body ( refunds = refunds ) api_response = self . session . post ( \" {} /batch\" . format ( get_url_path ( API . REFUNDS_BASE , self . auth_type , self . mode )), json = payload , headers = self . headers , ) initiate_batch_refund_response_data_schema = InitiateBatchRefundResponseDataSchema () return initiate_batch_refund_response_data_schema . load ( api_response . json ()[ 'data' ]) @Decorators . auth_handler def get_batch_refund_status ( self , batch_refund_id : str ) -> BatchRefundStatusResponse : \"\"\"Get batch refund status.\"\"\" api_response = self . session . get ( \" {} /batch/ {} \" . format ( get_url_path ( API . REFUNDS_BASE , self . auth_type , self . mode ), batch_refund_id ), headers = self . headers , ) batch_refund_status_response_schema = BatchRefundStatusResponseSchema () return batch_refund_status_response_schema . load ( api_response . json ()[ 'data' ]) @Decorators . auth_handler def get_refund_status ( self , refund_id : str ) -> RefundResponseItem : \"\"\"Get individual refund status.\"\"\" api_response = self . session . get ( \" {} / {} \" . format ( get_url_path ( API . REFUNDS_BASE , self . auth_type , self . mode ), refund_id ), headers = self . headers , ) refund_response_item_schema = RefundResponseItemSchema () return refund_response_item_schema . load ( api_response . json ()[ 'data' ])","title":"Deeplink"},{"location":"api/#setu.deeplink.Deeplink.Decorators","text":"Decorators. Source code in setu/deeplink.py class Decorators : \"\"\"Decorators.\"\"\" @staticmethod def auth_handler ( decorated : Callable ): \"\"\"Refresh token.\"\"\" def wrapper ( deeplink , * args , ** kwargs ): try : if deeplink . auth_type == AUTH_TYPE_JWT : deeplink . regenerate_token () return decorated ( deeplink , * args , ** kwargs ) except requests . exceptions . HTTPError : deeplink . regenerate_token () return decorated ( deeplink , * args , ** kwargs ) return wrapper","title":"Decorators"},{"location":"api/#setu.deeplink.Deeplink.Decorators.auth_handler","text":"Refresh token. Source code in setu/deeplink.py @staticmethod def auth_handler ( decorated : Callable ): \"\"\"Refresh token.\"\"\" def wrapper ( deeplink , * args , ** kwargs ): try : if deeplink . auth_type == AUTH_TYPE_JWT : deeplink . regenerate_token () return decorated ( deeplink , * args , ** kwargs ) except requests . exceptions . HTTPError : deeplink . regenerate_token () return decorated ( deeplink , * args , ** kwargs ) return wrapper","title":"auth_handler()"},{"location":"api/#setu.deeplink.Deeplink.__init__","text":"Constructor for the Deeplink class. Parameters: Name Type Description Default scheme_id str description required secret str description required product_instance_id str description required auth_type Literal[\"JWT\", \"OAUTH\"] description . Defaults to \"JWT\". 'JWT' mode Literal[\"SANDBOX\", \"PRODUCTION\"] description . Defaults to \"SANDBOX\". 'SANDBOX' Source code in setu/deeplink.py def __init__ ( self , scheme_id : str , secret : str , product_instance_id : str , auth_type : AuthType = \"JWT\" , mode : Mode = \"SANDBOX\" , ): \"\"\"Constructor for the Deeplink class. Args: scheme_id (str): _description_ secret (str): _description_ product_instance_id (str): _description_ auth_type (Literal[\"JWT\", \"OAUTH\"], optional): _description_. Defaults to \"JWT\". mode (Literal[\"SANDBOX\", \"PRODUCTION\"], optional): _description_. Defaults to \"SANDBOX\". \"\"\" self . scheme_id = scheme_id self . secret = secret self . mode = mode self . auth_type = auth_type self . headers = { \"X-Setu-Product-Instance-ID\" : product_instance_id , \"Content-Type\" : \"application/json\" , } self . session = requests . Session () self . session . hooks = { \"response\" : lambda r , * args , ** kwargs : self . exception_handler ( r )}","title":"__init__()"},{"location":"api/#setu.deeplink.Deeplink.exception_handler","text":"Exception handler. Source code in setu/deeplink.py @staticmethod def exception_handler ( r : Response ): \"\"\"Exception handler.\"\"\" try : r . raise_for_status () except requests . exceptions . RequestException as e : if isinstance ( e , requests . exceptions . HTTPError ) and r . reason == \"Forbidden\" : raise e else : error_response_schema = SetuErrorResponseSchema () raise SetuAPIException ( error_response_schema . load ( r . json ()))","title":"exception_handler()"},{"location":"api/#setu.deeplink.Deeplink.regenerate_token","text":"Re-generate token. Source code in setu/deeplink.py def regenerate_token ( self ): \"\"\"Re-generate token.\"\"\" if self . auth_type == AUTH_TYPE_JWT : authorization = generate_jwt_token ( self . scheme_id , self . secret ) else : authorization = generate_oauth_token ( self . scheme_id , self . secret , self . mode ) self . headers [ \"Authorization\" ] = authorization","title":"regenerate_token()"},{"location":"api/#setu.endpoint","text":"Endpoint module.","title":"endpoint"},{"location":"api/#setu.endpoint.get_url_path","text":"Get URL for API. Parameters: Name Type Description Default endpoint API description required auth_type AuthType description . Defaults to \"JWT\". 'JWT' mode Mode description . Defaults to \"SANDBOX\". 'SANDBOX' Returns: Type Description str description Source code in setu/endpoint.py def get_url_path ( endpoint : API , auth_type : AuthType = \"JWT\" , mode : Mode = \"SANDBOX\" , ) -> str : \"\"\"Get URL for API. Args: endpoint (API): _description_ auth_type (AuthType, optional): _description_. Defaults to \"JWT\". mode (Mode, optional): _description_. Defaults to \"SANDBOX\". Returns: str: _description_ \"\"\" return \" {base_url}{api_version}{path} \" . format ( base_url = PRODUCTION_BASE if mode == MODE_PRODUCTION else SANDBOX_BASE , api_version = \"/v2\" if auth_type == AUTH_TYPE_OAUTH else \"\" , path = endpoint . value , )","title":"get_url_path()"},{"location":"api/#setu.serial","text":"Marshmallow serialization classes.","title":"serial"},{"location":"api/#setu.serial.AccountSchema","text":"Account Schema. Source code in setu/serial.py class AccountSchema ( Schema ): \"\"\"Account Schema.\"\"\" account_number = fields . Str ( data_key = \"id\" ) account_ifsc = fields . Str ( data_key = \"ifsc\" ) name = fields . Str ( required = False ) @post_load def make_account ( self , data , ** kwargs ): \"\"\"Deserialize to Account object.\"\"\" return Account ( ** data )","title":"AccountSchema"},{"location":"api/#setu.serial.AccountSchema.make_account","text":"Deserialize to Account object. Source code in setu/serial.py @post_load def make_account ( self , data , ** kwargs ): \"\"\"Deserialize to Account object.\"\"\" return Account ( ** data )","title":"make_account()"},{"location":"api/#setu.serial.AmountSchema","text":"Amount Schema. Source code in setu/serial.py class AmountSchema ( Schema ): \"\"\"Amount Schema.\"\"\" currency_code = fields . Str ( data_key = \"currencyCode\" ) value = fields . Int () @post_load def make_amount ( self , data , ** kwargs ): \"\"\"Deserialize to Amount object.\"\"\" return Amount ( ** data )","title":"AmountSchema"},{"location":"api/#setu.serial.AmountSchema.make_amount","text":"Deserialize to Amount object. Source code in setu/serial.py @post_load def make_amount ( self , data , ** kwargs ): \"\"\"Deserialize to Amount object.\"\"\" return Amount ( ** data )","title":"make_amount()"},{"location":"api/#setu.serial.BatchRefundResponseItemSchema","text":"Batch Refund Response Data Item Schema. Source code in setu/serial.py class BatchRefundResponseItemSchema ( OneOfSchema ): \"\"\"Batch Refund Response Data Item Schema.\"\"\" type_field = \"success\" type_schemas = { True : RefundResponseItemSchema , False : SetuErrorResponseDataSchema } seq_no = fields . Int ( data_key = \"seqNo\" ) success = fields . Bool ()","title":"BatchRefundResponseItemSchema"},{"location":"api/#setu.serial.BatchRefundStatusResponseSchema","text":"Get Batch Refund Status Response Data Schema. Source code in setu/serial.py class BatchRefundStatusResponseSchema ( Schema ): \"\"\"Get Batch Refund Status Response Data Schema.\"\"\" batch_id = fields . Str ( data_key = \"batchID\" ) refunds = fields . List ( fields . Nested ( RefundResponseItemSchema ())) @post_load def make_batch_refund_response ( self , data , ** kwargs ): \"\"\"Deserialize to BatchRefundStatusResponse object.\"\"\" return BatchRefundStatusResponse ( ** data )","title":"BatchRefundStatusResponseSchema"},{"location":"api/#setu.serial.BatchRefundStatusResponseSchema.make_batch_refund_response","text":"Deserialize to BatchRefundStatusResponse object. Source code in setu/serial.py @post_load def make_batch_refund_response ( self , data , ** kwargs ): \"\"\"Deserialize to BatchRefundStatusResponse object.\"\"\" return BatchRefundStatusResponse ( ** data )","title":"make_batch_refund_response()"},{"location":"api/#setu.serial.CreatePaymentLinkResponseDataSchema","text":"Create Payment Link Response Data Schema. Source code in setu/serial.py class CreatePaymentLinkResponseDataSchema ( Schema ): \"\"\"Create Payment Link Response Data Schema.\"\"\" name = fields . Str () payment_link = fields . Nested ( PaymentLinkSchema (), data_key = \"paymentLink\" ) platform_bill_id = fields . Str ( data_key = \"platformBillID\" ) campaign_id = fields . Str ( data_key = \"campaignID\" ) @post_load def make_create_payment_link_response ( self , data , ** kwargs ): \"\"\"Deserialize to CreatePaymentLinkResponseData object.\"\"\" return CreatePaymentLinkResponseData ( ** data )","title":"CreatePaymentLinkResponseDataSchema"},{"location":"api/#setu.serial.CreatePaymentLinkResponseDataSchema.make_create_payment_link_response","text":"Deserialize to CreatePaymentLinkResponseData object. Source code in setu/serial.py @post_load def make_create_payment_link_response ( self , data , ** kwargs ): \"\"\"Deserialize to CreatePaymentLinkResponseData object.\"\"\" return CreatePaymentLinkResponseData ( ** data )","title":"make_create_payment_link_response()"},{"location":"api/#setu.serial.DeductionResponseSchema","text":"Deduction Response Schema. Source code in setu/serial.py class DeductionResponseSchema ( Schema ): \"\"\"Deduction Response Schema.\"\"\" account = fields . Nested ( AccountSchema ()) split = fields . Nested ( SplitDetailsSchema ())","title":"DeductionResponseSchema"},{"location":"api/#setu.serial.InitiateBatchRefundResponseDataSchema","text":"Initiate Batch Refund Response Data Schema. Source code in setu/serial.py class InitiateBatchRefundResponseDataSchema ( Schema ): \"\"\"Initiate Batch Refund Response Data Schema.\"\"\" batch_id = fields . Str ( data_key = \"batchID\" ) refunds = fields . List ( fields . Nested ( BatchRefundResponseItemSchema ( unknown = EXCLUDE ))) @post_load def make_initiate_batch_refund_response_data ( self , data , ** kwargs ): \"\"\"Deserialize to InitiateBatchRefundResponse object.\"\"\" return InitiateBatchRefundResponse ( ** data )","title":"InitiateBatchRefundResponseDataSchema"},{"location":"api/#setu.serial.InitiateBatchRefundResponseDataSchema.make_initiate_batch_refund_response_data","text":"Deserialize to InitiateBatchRefundResponse object. Source code in setu/serial.py @post_load def make_initiate_batch_refund_response_data ( self , data , ** kwargs ): \"\"\"Deserialize to InitiateBatchRefundResponse object.\"\"\" return InitiateBatchRefundResponse ( ** data )","title":"make_initiate_batch_refund_response_data()"},{"location":"api/#setu.serial.MockCreditResponseDataSchema","text":"Mock Credit Response Data Schema. Source code in setu/serial.py class MockCreditResponseDataSchema ( Schema ): \"\"\"Mock Credit Response Data Schema.\"\"\" utr = fields . Str () @post_load def make_mock_credit_response ( self , data , ** kwargs ): \"\"\"Deserialize to MockCreditResponseData.\"\"\" return MockCreditResponseData ( ** data )","title":"MockCreditResponseDataSchema"},{"location":"api/#setu.serial.MockCreditResponseDataSchema.make_mock_credit_response","text":"Deserialize to MockCreditResponseData. Source code in setu/serial.py @post_load def make_mock_credit_response ( self , data , ** kwargs ): \"\"\"Deserialize to MockCreditResponseData.\"\"\" return MockCreditResponseData ( ** data )","title":"make_mock_credit_response()"},{"location":"api/#setu.serial.PaymentLinkSchema","text":"Payment Link information schema. Source code in setu/serial.py class PaymentLinkSchema ( Schema ): \"\"\"Payment Link information schema.\"\"\" short_url = fields . Str ( data_key = \"shortURL\" , required = False ) upi_id = fields . Str ( data_key = \"upiID\" ) upi_link = fields . Str ( data_key = \"upiLink\" ) @post_load def make_payment_link ( self , data , ** kwargs ): \"\"\"Deserialize to PaymentLink object.\"\"\" return PaymentLink ( ** data )","title":"PaymentLinkSchema"},{"location":"api/#setu.serial.PaymentLinkSchema.make_payment_link","text":"Deserialize to PaymentLink object. Source code in setu/serial.py @post_load def make_payment_link ( self , data , ** kwargs ): \"\"\"Deserialize to PaymentLink object.\"\"\" return PaymentLink ( ** data )","title":"make_payment_link()"},{"location":"api/#setu.serial.PaymentLinkStatusResponseDataSchema","text":"Payment Link Status Response Data Schema. Source code in setu/serial.py class PaymentLinkStatusResponseDataSchema ( Schema ): \"\"\"Payment Link Status Response Data Schema.\"\"\" created_at = fields . DateTime ( data_key = \"createdAt\" ) expires_at = fields . DateTime ( data_key = \"expiresAt\" ) name = fields . Str () payment_link = fields . Nested ( PaymentLinkSchema (), data_key = \"paymentLink\" ) platform_bill_id = fields . Str ( data_key = \"platformBillID\" ) biller_bill_id = fields . Str ( data_key = \"billerBillID\" ) status = fields . Str () transaction_note = fields . Str ( data_key = \"transactionNote\" ) campaign_id = fields . Str ( data_key = \"campaignID\" , required = False ) payer_vpa = fields . Str ( data_key = \"payerVpa\" , required = False ) receipt = fields . Nested ( ReceiptSchema (), required = False ) amount_paid = fields . Nested ( AmountSchema (), data_key = \"amountPaid\" , required = False ) additional_info = fields . Dict ( keys = fields . Str (), values = fields . Str (), data_key = \"additionalInfo\" , required = False ) @post_load def make_payment_link_status_response ( self , data , ** kwargs ): \"\"\"Deserialize to PaymentLinkStatusResponseData.\"\"\" return PaymentLinkStatusResponseData ( ** data )","title":"PaymentLinkStatusResponseDataSchema"},{"location":"api/#setu.serial.PaymentLinkStatusResponseDataSchema.make_payment_link_status_response","text":"Deserialize to PaymentLinkStatusResponseData. Source code in setu/serial.py @post_load def make_payment_link_status_response ( self , data , ** kwargs ): \"\"\"Deserialize to PaymentLinkStatusResponseData.\"\"\" return PaymentLinkStatusResponseData ( ** data )","title":"make_payment_link_status_response()"},{"location":"api/#setu.serial.ReceiptSchema","text":"Receipt Schema. Source code in setu/serial.py class ReceiptSchema ( Schema ): \"\"\"Receipt Schema.\"\"\" date = fields . DateTime () id = fields . Str () @post_load def make_receipt ( self , data , ** kwargs ): \"\"\"Deserialize to Receipt object.\"\"\" return Receipt ( ** data )","title":"ReceiptSchema"},{"location":"api/#setu.serial.ReceiptSchema.make_receipt","text":"Deserialize to Receipt object. Source code in setu/serial.py @post_load def make_receipt ( self , data , ** kwargs ): \"\"\"Deserialize to Receipt object.\"\"\" return Receipt ( ** data )","title":"make_receipt()"},{"location":"api/#setu.serial.RefundResponseItemSchema","text":"Refund Response Item Schema. Source code in setu/serial.py class RefundResponseItemSchema ( Schema ): \"\"\"Refund Response Item Schema.\"\"\" id = fields . Str () bill_id = fields . Str ( data_key = \"billID\" ) transaction_ref_id = fields . Str ( data_key = \"transactionRefID\" ) amount = fields . Nested ( AmountSchema ()) status = fields . Str () deductions = fields . List ( fields . Nested ( DeductionResponseSchema ()), required = False ) initiated_at = fields . DateTime ( data_key = \"initiatedAt\" , required = False ) @post_load def make_refund_response_item ( self , data , ** kwargs ): \"\"\"Deserialize to RefundResponseItem object.\"\"\" return RefundResponseItem ( ** data )","title":"RefundResponseItemSchema"},{"location":"api/#setu.serial.RefundResponseItemSchema.make_refund_response_item","text":"Deserialize to RefundResponseItem object. Source code in setu/serial.py @post_load def make_refund_response_item ( self , data , ** kwargs ): \"\"\"Deserialize to RefundResponseItem object.\"\"\" return RefundResponseItem ( ** data )","title":"make_refund_response_item()"},{"location":"api/#setu.serial.SetuErrorResponseDataSchema","text":"Setu Error Response Data Schema. Source code in setu/serial.py class SetuErrorResponseDataSchema ( Schema ): \"\"\"Setu Error Response Data Schema.\"\"\" code = fields . Str () detail = fields . Str () title = fields . Str () doc_url = fields . Str ( data_key = \"docURL\" , required = False ) errors = fields . List ( fields . Str (), required = False ) trace_id = fields . Str ( data_key = \"traceID\" , required = False ) @post_load def make_error_response_data ( self , data , ** kwargs ): \"\"\"Deserialize to SetuErrorResponseData object.\"\"\" return SetuErrorResponseData ( ** data )","title":"SetuErrorResponseDataSchema"},{"location":"api/#setu.serial.SetuErrorResponseDataSchema.make_error_response_data","text":"Deserialize to SetuErrorResponseData object. Source code in setu/serial.py @post_load def make_error_response_data ( self , data , ** kwargs ): \"\"\"Deserialize to SetuErrorResponseData object.\"\"\" return SetuErrorResponseData ( ** data )","title":"make_error_response_data()"},{"location":"api/#setu.serial.SetuErrorResponseSchema","text":"Setu Error Response Schema. Source code in setu/serial.py class SetuErrorResponseSchema ( SetuResponseBaseSchema ): \"\"\"Setu Error Response Schema.\"\"\" error_response = fields . Nested ( SetuErrorResponseDataSchema (), data_key = \"error\" ) @post_load def make_error_response ( self , data , ** kwargs ): \"\"\"Deserialize to SetuErrorResponseData object.\"\"\" return data [ \"error_response\" ]","title":"SetuErrorResponseSchema"},{"location":"api/#setu.serial.SetuErrorResponseSchema.make_error_response","text":"Deserialize to SetuErrorResponseData object. Source code in setu/serial.py @post_load def make_error_response ( self , data , ** kwargs ): \"\"\"Deserialize to SetuErrorResponseData object.\"\"\" return data [ \"error_response\" ]","title":"make_error_response()"},{"location":"api/#setu.serial.SetuResponseBaseSchema","text":"Setu Base Response Schema. Source code in setu/serial.py class SetuResponseBaseSchema ( Schema ): \"\"\"Setu Base Response Schema.\"\"\" status = fields . Int () success = fields . Bool ()","title":"SetuResponseBaseSchema"},{"location":"api/#setu.serial.SplitDetailsSchema","text":"Split Details Schema. Source code in setu/serial.py class SplitDetailsSchema ( Schema ): \"\"\"Split Details Schema.\"\"\" value = fields . Int () unit = fields . Str ()","title":"SplitDetailsSchema"},{"location":"changelog/","text":"Changelog \u00b6 [1.1.1] - 2022-05-27 \u00b6 Bug fixes \u00b6 Make SetuAPIException accessible from package index [1.1.0] - 2022-05-27 \u00b6 Bug fixes \u00b6 Rename SDK import back to setu [1.0.0] - 2022-05-26 \u00b6 Major refactor of the SDK","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#111---2022-05-27","text":"","title":"[1.1.1] - 2022-05-27"},{"location":"changelog/#bug-fixes","text":"Make SetuAPIException accessible from package index","title":"Bug fixes"},{"location":"changelog/#110---2022-05-27","text":"","title":"[1.1.0] - 2022-05-27"},{"location":"changelog/#bug-fixes_1","text":"Rename SDK import back to setu","title":"Bug fixes"},{"location":"changelog/#100---2022-05-26","text":"Major refactor of the SDK","title":"[1.0.0] - 2022-05-26"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/SetuHQ/setu-python-sdk/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 Setu UPI DeepLinks SDK could always use more documentation, whether as part of the official Setu UPI DeepLinks SDK docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/SetuHQ/setu-python-sdk/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up setu-python-sdk for local development. Fork the setu-python-sdk repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/setu-python-sdk.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/SetuHQ/setu-python-sdk/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_setu.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/SetuHQ/setu-python-sdk/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"Setu UPI DeepLinks SDK could always use more documentation, whether as part of the official Setu UPI DeepLinks SDK docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/SetuHQ/setu-python-sdk/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up setu-python-sdk for local development. Fork the setu-python-sdk repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/setu-python-sdk.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/SetuHQ/setu-python-sdk/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_setu.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Installation \u00b6 Stable release \u00b6 To install Setu UPI DeepLinks SDK, run this command in your terminal: $ pip install setu-python-sdk This is the preferred method to install Setu UPI DeepLinks SDK, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for Setu UPI DeepLinks SDK can be downloaded from the Github repo . You can either clone the public repository: $ git clone git@github.com:SetuHQ/setu-python-sdk.git Or download the tarball : $ curl -OJL https://github.com/SetuHQ/setu-python-sdk/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#stable-release","text":"To install Setu UPI DeepLinks SDK, run this command in your terminal: $ pip install setu-python-sdk This is the preferred method to install Setu UPI DeepLinks SDK, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for Setu UPI DeepLinks SDK can be downloaded from the Github repo . You can either clone the public repository: $ git clone git@github.com:SetuHQ/setu-python-sdk.git Or download the tarball : $ curl -OJL https://github.com/SetuHQ/setu-python-sdk/tarball/master Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage \u00b6 To use Setu UPI DeepLinks SDK in a project import setu","title":"Usage"},{"location":"usage/#usage","text":"To use Setu UPI DeepLinks SDK in a project import setu","title":"Usage"}]}